[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "local-llm"
version = "0.1.0"
description = "A unified interface for interacting with Ollama and LM Studio APIs"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "David Koh", email = "your.email@example.com"},
]
maintainers = [
    {name = "David Koh", email = "your.email@example.com"},
]
keywords = ["llm", "ollama", "lmstudio", "ai", "machine-learning", "local-llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "requests>=2.31.0",
    "openai>=1.0.0",
    "ollama>=0.1.34",
    "pyautogen>=0.2.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "ruff>=0.11.12"
]

[project.urls]
Homepage = "https://github.com/yourusername/local-llm"
Repository = "https://github.com/yourusername/local-llm.git"
"Bug Tracker" = "https://github.com/yourusername/local-llm/issues"
Documentation = "https://github.com/yourusername/local-llm#readme"

[project.scripts]
local-llm = "llm:main"  # This assumes llm.py has a main() function

[tool.setuptools]
packages = ["llm", "ollama_api", "lmstudio_api", "logger", "library", "config"]
py-modules = ["llm", "ollama_api", "lmstudio_api", "logger", "library", "config"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
# Ruff can replace both Black and Flake8
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E203",  # Whitespace before ':'
    "E501",  # Line too long (handled by formatter)
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg",
    "venv",
    ".venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__ files

[tool.ruff.isort]
known-first-party = ["llm", "ollama_api", "lmstudio_api", "logger", "library", "config"]
